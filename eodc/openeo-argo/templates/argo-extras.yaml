{{- if .Values.argoworkflows.enabled }}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openeo-argo-access-role
  namespace: {{ .Release.Namespace }}
rules:
  - apiGroups: ["argoproj.io"]
    resources: ["workflows"]
    verbs: [ "get","create", "list", "update", "patch" ]
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openeo-secret-access
  namespace: {{ .Release.Namespace }}
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "patch", "create", "delete" ]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: openeo-secret-access-sa
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "openeo-argo.labels" . | nindent 4 }}
automountServiceAccountToken: true
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: openeo-argo-access-sa
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": "pre-install, pre-upgrade"
  labels:
    {{- include "openeo-argo.labels" . | nindent 4 }}
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: openeo-argo-access-rb
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: openeo-argo-access-role
subjects:
- kind: ServiceAccount
  name: openeo-argo-access-sa
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: openeo-secret-rb
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: openeo-secret-access
subjects:
- kind: ServiceAccount
  name: openeo-secret-access-sa
  namespace: {{ .Release.Namespace }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: openeo-argo-access-init-{{ .Release.Revision }}
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": "post-install,post-upgrade"
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
  labels:
    {{- include "openeo-argo.labels" . | nindent 4 }}
    app.kubernetes.io/component: argo-access-init
spec:
  template:
    metadata:
      labels:
        {{- include "openeo-argo.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: argo-access-init
    spec:
      restartPolicy: Never
      serviceAccountName: openeo-secret-access-sa
      containers:
      - name: openeo-argo-secret-fixer
        imagePullPolicy: IfNotPresent
        image: bitnami/kubectl:latest
        command: ["sh", "-xc"]
        args:
          - |
            # Delete the secret if it exists (to handle immutability)
            kubectl delete secret openeo-argo-access-sa.service-account-token --ignore-not-found=true
            
            kubectl apply -f - <<EOF
            apiVersion: v1
            kind: Secret
            metadata:
              name: openeo-argo-access-sa.service-account-token
              annotations:
                kubernetes.io/service-account.name: openeo-argo-access-sa
            type: kubernetes.io/service-account-token
            EOF
{{- end }}
